{"version":3,"sources":["utils/helper.js","components/IssueDetails.js","components/Labels.js","components/IssueList.js","components/Issues.js","App.js","reportWebVitals.js","index.js"],"names":["IssueDetails","data","createdAt","timestamp","MINUTE","SECOND","HOUR","DAY","MONTH","YEAR","timeelapsed","Date","now","getElapsedString","value","unit","round","Math","helper","created_at","user","login","timeStamp","number","Fragment","Labels","labelMap","labels","map","label","index","style","backgroundColor","color","className","name","IssueList","issuesMap","currentIssues","Container","data-id","id","Row","Col","md","title","headers","Authorization","Accept","Issues","props","state","repo","listFilter","choice","since","toISOString","per_page","sort","page","currentPageNumber","currentPage","pages","issues","loading","error","showBody","getIssues","bind","handleClick","event","this","setState","Number","target","params","keys","Object","length","key","encodeURIComponent","join","linkHeaders","userRepositoryIssues","fullUrl","fetch","then","response","get","header","Error","split","reduce","links","part","section","url","replace","trim","ok","json","catch","ProgressBar","animated","message","renderError","indexOfLastIssue","indexOfFirstIssue","slice","renderPageNumbers","pageNumbers","i","ceil","push","onClick","renderLoading","renderIssues","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSA+BO,I,gCCfQA,EAbM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChBC,ED2BoB,SAACC,GAC3B,IACEC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EACNE,EAAc,GAAND,EACRE,EAAa,IAANF,EAEHG,EAAcC,KAAKC,MAAQT,EAC/BU,EAAmB,SAACC,EAAOC,GACzB,IAAMC,EAAQC,KAAKD,MAAMN,EAAcI,GACvC,MAAM,GAAN,OAAUE,EAAV,YAAmBD,GAAnB,OAA0BC,EAAQ,EAC9B,IACA,GAFJ,SAIJ,OAAIN,EAAcN,EACTS,EAfM,IAemB,UAE9BH,EAAcJ,EACTO,EAAiBT,EAAQ,UAE9BM,EAAcH,EACTM,EAAiBP,EAAM,QAE5BI,EAAcF,EACTK,EAAiBN,EAAK,OAE3BG,EAAcD,EACTI,EAAiBL,EAAO,SAE1BK,EAAiBJ,EAAM,QCzDZS,CAAoB,IAAIP,KAAKV,EAAKkB,aAC9CC,EAAOnB,EAAKmB,KAAKC,MAEnBC,EAAS,WAAOrB,EAAKsB,OAAZ,mBAA6BrB,EAA7B,eAA6CkB,GAE1D,OACE,cAAC,IAAMI,SAAP,UACGF,KCIQG,EAZA,SAAC,GAAgB,IAC1BC,EADyB,EAAbC,OACMC,KAAI,SAACC,EAAOC,GAChC,OAAO,sBAAkBC,MAAO,CAAEC,gBAAiB,IAAMH,EAAMI,OAASC,UAAW,QAA5E,SAAsFL,EAAMM,MAAjFL,MAEpB,OACE,cAAC,IAAMN,SAAP,UACGE,KCwBQU,EA5BG,SAAC,GAAuB,IACpCC,EADmC,EAApBC,cACWV,KAAI,SAAC3B,EAAM6B,GACvC,OAAO,8BACD,cAACS,EAAA,EAAD,UACE,sBAAMC,UAASvC,EAAKwC,GAApB,SACE,eAACC,EAAA,EAAD,CAAKR,UAAU,cAAf,UACE,cAACS,EAAA,EAAD,CAAKC,GAAI,EAAT,SAAY,mBAAGV,UAAU,qCACzB,eAACS,EAAA,EAAD,CAAKC,GAAI,GAAIV,UAAU,eAAvB,UACE,sBAAMA,UAAU,QAAhB,SAAyBjC,EAAK4C,QAC5B,cAAC,EAAD,CAAQlB,OAAQ1B,EAAK0B,SACvB,uBACA,sBAAMO,UAAU,YAAhB,SACE,cAAC,EAAD,CAAcjC,KAAMA,iBAVnB6B,MAkBrB,OACE,cAAC,IAAMN,SAAP,UACGa,KCrBCS,EAAU,CACdA,QAAS,CACPC,cAAe,iDACfC,OAAQ,mFAsJGC,E,kDA5Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACX/B,KAAM,EAAK8B,MAAM9B,KACjBgC,KAAM,EAAKF,MAAME,KACjBC,WAAY,CAAEF,MAAO,OAAQG,OAAQ,UACrCC,MAAO,IAAI5C,KAAKA,KAAKC,MAAQ,QAAyB4C,cACtDC,SAAU,GACVC,KAAM,UACNC,KAAM,GACNC,kBAAmB,EACnBC,YAAa,EACbC,MAAO,GACPC,OAAQ,GACRC,SAAS,EACTC,MAAO,KACPC,SAAU,IAGZ,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAEjB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBArBF,E,wDAwBPE,GACVC,KAAKC,SAAS,CACZX,YAAaY,OAAOH,EAAMI,OAAOjC,Q,0CAKnC8B,KAAKJ,c,kCAMM,IAAD,OAEJZ,EAAQ,IAAI5C,KAAKA,KAAKC,MAAQ,QAAyB4C,cAEvDmB,EJ3DuB,SAACA,GAChC,IAAMC,EAAOC,OAAOD,KAAKD,GACzB,OAAOC,EAAKE,OACR,IAAMF,EACLhD,KAAI,SAAAmD,GAAG,OAAIC,mBAAmBD,GAC3B,IAAMC,mBAAmBL,EAAOI,OACnCE,KAAK,KACN,GIoDa/D,CAAyB,CAAEiC,MAAOoB,KAAKpB,MAAME,WAAWF,MAAOI,MAAOA,EAAOE,SAAU,GAAIC,KAAM,YAE5GwB,EAAc,GAEdC,EAAoB,UAAMZ,KAAKrB,MAAM9B,KAAjB,YAAyBmD,KAAKrB,MAAME,KAApC,WACpBgC,EAAO,UApDC,+BAoDD,YAAiBD,GAAjB,OAAwCR,GAAxC,OAAiDJ,KAAKpB,MAAMQ,MAEvE0B,MAAMD,EAAStC,GACZwC,MAAK,SAAAC,GAIJ,GAHIA,EAASzC,QAAQ0C,IAAI,UACvBN,EJ3DH,SAAyBO,GAC9B,GAAsB,IAAlBA,EAAOX,OACT,MAAM,IAAIY,MAAM,oCAIlB,OAAOD,EAAOE,MAAM,6BAA6BC,QAAO,SAACC,EAAOC,GAC9D,IAAMC,EAAUD,EAAKH,MAAM,6BAC3B,GAAII,EAAQjB,OAAS,EACnB,MAAM,IAAIY,MAAM,qCAElB,IAAMM,EAAMD,EAAQ,GAAGE,QAAQ,SAAU,MAAMC,OAK/C,OAFAL,EAFaE,EAAQ,GAAGE,QAAQ,aAAc,MAAMC,QAEtCF,EAEPH,IACN,II0CmB3E,CAAuBqE,EAASzC,QAAQ0C,IAAI,UAExDD,EAASY,GAAI,OAAOZ,EAASa,OACjC,MAAM,IAAIV,MAAM,sBAEjBJ,MAAK,SAAArF,GAEJ,EAAKuE,SAAS,CACZV,MAAOoB,EACPnB,OAAQ9D,EACR+D,SAAS,EACTC,MAAO,KACPC,SAAU,QAGbmC,OAAM,SAAApC,GACL,EAAKO,SAAS,CACZR,SAAS,EACTC,MAAOA,S,sCAOb,OAAO,cAACqC,EAAA,EAAD,CAAaC,UAAQ,EAAC3F,IAAK,Q,oCAKlC,OACE,uDACuB2D,KAAKpB,MAAMc,MAAMuC,a,qCAM5B,IAAD,OACb,GAAIjC,KAAKpB,MAAMc,MACX,OAAOM,KAAKkC,cAFH,MAK6BlC,KAAKpB,MAAvCY,EALK,EAKLA,OAAQF,EALH,EAKGA,YAAaJ,EALhB,EAKgBA,SAEvBnB,EJnDsB,SAACyB,EAAQN,EAAUI,GAEjD,IAAM6C,EAAmB7C,EAAcJ,EACjCkD,EAAoBD,EAAmBjD,EAG7C,OAFsBM,EAAO6C,MAAMD,EAAmBD,GI+C9BxF,CAAwB6C,EAAQN,EAAUI,GAK1DgD,EJ/CwB,SAAC9C,EAAQN,GAIzC,IADA,IAAMqD,EAAc,GACXC,EAAI,EAAGA,GAAK9F,KAAK+F,KAAKjD,EAAOe,OAASrB,GAAWsD,IACtDD,EAAYG,KAAKF,GAGrB,OAAOD,EIoCe5F,CAA0B6C,EAAQN,GAGhB7B,KAAI,SAAAL,GACxC,OAAGA,IAAWsC,EAEV,wBAAQ3B,UAAU,mDAAgEO,GAAIlB,EAAQ2F,QAAS,EAAK7C,YAA5G,SACG9C,GADuEA,GAM1E,wBAAQW,UAAU,4CAAyDO,GAAIlB,EAAQ2F,QAAS,EAAK7C,YAArG,SACG9C,GADgEA,MAOzE,OACE,eAAE,IAAMC,SAAR,WACE,cAAC,EAAD,CAAWc,cAAiBA,IAC3BuE,O,+BAML,OACE,qBAAK3E,UAAU,YAAf,SACE,sBAAKA,UAAU,QAAf,UACA,sDACA,uBACCqC,KAAKpB,MAAMa,QACRO,KAAK4C,gBACH5C,KAAK6C,wB,GAvIEC,IAAMC,W,MCNZC,MARf,WACE,OACE,qBAAKrF,UAAU,MAAf,SACE,cAAC,EAAD,CAASd,KAAK,WAAWgC,KAAK,aCMrBoE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a4615480.chunk.js","sourcesContent":["\nexport const encodeQueryString = (params) => {\n  const keys = Object.keys(params)\n  return keys.length\n    ? \"?\" + keys\n      .map(key => encodeURIComponent(key)\n        + \"=\" + encodeURIComponent(params[key]))\n      .join(\"&\")\n    : \"\"\n}\n\nexport function parseLinkHeader(header) {\n  if (header.length === 0) {\n    throw new Error(\"input must not be of zero length\");\n  }\n\n  // Split parts by comma and parse each part into a named link\n  return header.split(/(?!\\B\"[^\"]*),(?![^\"]*\"\\B)/).reduce((links, part) => {\n    const section = part.split(/(?!\\B\"[^\"]*);(?![^\"]*\"\\B)/);\n    if (section.length < 2) {\n      throw new Error(\"section could not be split on ';'\");\n    }\n    const url = section[0].replace(/<(.*)>/, '$1').trim();\n    const name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n\n    links[name] = url;\n\n    return links;\n  }, {});\n}\n\nexport const getTimeStamp = (timestamp) => {\n  const SECOND = 1000,\n    MINUTE = SECOND * 60,\n    HOUR = MINUTE * 60,\n    DAY = HOUR * 24,\n    MONTH = DAY * 30,\n    YEAR = DAY * 365;\n\n  const timeelapsed = Date.now() - timestamp,\n    getElapsedString = (value, unit) => {\n      const round = Math.round(timeelapsed / value);\n      return `${round} ${unit}${round > 1\n        ? 's'\n        : ''} ago`;\n    };\n  if (timeelapsed < MINUTE) {\n    return getElapsedString(SECOND, 'second');\n  }\n  if (timeelapsed < HOUR) {\n    return getElapsedString(MINUTE, 'minute');\n  }\n  if (timeelapsed < DAY) {\n    return getElapsedString(HOUR, 'hour');\n  }\n  if (timeelapsed < MONTH) {\n    return getElapsedString(DAY, 'day');\n  }\n  if (timeelapsed < YEAR) {\n    return getElapsedString(MONTH, 'month');\n  }\n  return getElapsedString(YEAR, 'year');\n}\n\nexport const getCurrentIssues = (issues, per_page, currentPage) => {\n  // Logic for displaying issues\n  const indexOfLastIssue = currentPage * per_page;\n  const indexOfFirstIssue = indexOfLastIssue - per_page;\n  const currentIssues = issues.slice(indexOfFirstIssue, indexOfLastIssue);\n\n  return currentIssues;\n}\n\nexport const displayPageNumbers = (issues, per_page) => {\n     \n  // Logic for displaying page numbers\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(issues.length / per_page); i++) {\n      pageNumbers.push(i);\n  }\n\n  return pageNumbers;\n}\n","import React from 'react';\nimport * as helper from '../utils/helper';\n\nconst IssueDetails = ({ data }) => {\n  const createdAt = helper.getTimeStamp(new Date(data.created_at))\n  const user = data.user.login\n\n  let timeStamp = `#${data.number} opened ${createdAt} by ${user}`\n\n  return (\n    <React.Fragment>\n      {timeStamp}\n    </React.Fragment>\n)\n}\n\nexport default IssueDetails","import React from 'react';\n\n\nconst Labels = ({ labels }) => {\n  let labelMap = labels.map((label, index) => {\n    return <span key={index} style={{ backgroundColor: \"#\" + label.color }} className={\"label\"}>{label.name}</span>\n})\n  return (\n    <React.Fragment>\n      {labelMap}\n    </React.Fragment>\n  )\n\n}\n\nexport default Labels;","import React from 'react';\nimport { Col, Container, Row} from 'react-bootstrap';\nimport IssueDetails from './IssueDetails';\nimport Labels from './Labels';\n\nconst IssueList = ({ currentIssues }) => {\n  let issuesMap = currentIssues.map((data, index) => {\n    return <div key={index}>\n          <Container>\n            <span data-id={data.id} >\n              <Row className=\"py-2 border\">\n                <Col md={1}><i className=\"fa fa-exclamation-circle fa-2x\"></i></Col>\n                <Col md={11} className=\"issueDetails\">\n                  <span className=\"title\">{data.title}</span>\n                    <Labels labels={data.labels} />\n                  <br/>\n                  <span className=\"timestamp\">\n                    <IssueDetails data={data} />\n                  </span>\n                </Col>\n              </Row>\n            </span>\n          </Container>\n          </div> \n  })\nreturn (\n  <React.Fragment>\n    {issuesMap}\n  </React.Fragment>\n)\n\n}\n\nexport default IssueList;","import React from 'react';\nimport '../css/Issues.css';\nimport * as helper from '../utils/helper';\nimport { ProgressBar} from 'react-bootstrap';\nimport IssueList from './IssueList';\n\nconst headers = {\n  headers: {\n    Authorization: \"token e359ef605cbdf330a70659af7cbce43b2f3bce5c\",\n    Accept: \"application/vnd.github.v3+json,application/vnd.github.machine-man-preview+json\",\n  }\n};\n\nconst baseUrl = \"https://api.github.com/repos\"\n\n\n\nclass Issues extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: this.props.user,\n      repo: this.props.repo,\n      listFilter: { state: \"open\", choice: \"issues\" },\n      since: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n      per_page: 10,\n      sort: \"created\",\n      page: '',\n      currentPageNumber: 1,\n      currentPage: 1,\n      pages: {},\n      issues: [],\n      loading: true,\n      error: null,\n      showBody: {},\n    };\n      \n    this.getIssues = this.getIssues.bind(this);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    this.setState({\n      currentPage: Number(event.target.id)\n    });\n  }\n\n  componentDidMount() {\n    this.getIssues();\n  }\n\n  /**\n   * Fetch issues \n   */\n  getIssues() {\n    // 7 days ago from today \n    const since = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\n    \n    const params = helper.encodeQueryString({ state: this.state.listFilter.state, since: since, per_page: 40, sort: \"created\" })\n    \n    let linkHeaders = ''\n    \n    let userRepositoryIssues = `${this.props.user}/${this.props.repo}/issues`\n    let fullUrl = `${baseUrl}/${userRepositoryIssues}${params}${this.state.page}`\n\n    fetch(fullUrl, headers)\n      .then(response => {\n        if (response.headers.get('Link')) {\n          linkHeaders = helper.parseLinkHeader(response.headers.get('Link'))\n        }\n        if (response.ok) return response.json();\n        throw new Error('Request failed.');\n      })\n      .then(data => {\n        // set our state with the response\n        this.setState({\n          pages: linkHeaders,\n          issues: data,\n          loading: false,\n          error: null,\n          showBody: {},\n        });\n      })\n      .catch(error => {\n        this.setState({\n          loading: false,\n          error: error\n        });\n      });\n  }\n\n  // Render a loading bar during HTTP Request\n  renderLoading() {\n    return <ProgressBar animated now={100}/>;\n  }\n\n  // Render an error message\n  renderError() {\n    return (\n      <div>\n        Something is wrong: {this.state.error.message}\n      </div>\n    );\n  }\n\n  // Render issues\n  renderIssues() {\n    if (this.state.error) {\n        return this.renderError();\n    }\n\n    const { issues, currentPage, per_page } = this.state;\n\n    const currentIssues = helper.getCurrentIssues(issues, per_page, currentPage)\n\n    const pageNumbers = helper.displayPageNumbers(issues, per_page)\n\n    // display pagination\n    const renderPageNumbers = pageNumbers.map(number => {\n      if(number === currentPage ){\n        return(\n          <button className=\"btn btn-outline-primary pageBtn active mt-2 mb-2\" key={number} id={number} onClick={this.handleClick}>\n            {number}\n          </button>\n        )\n      }else{\n        return (\n          <button className=\"btn btn-outline-primary pageBtn mt-2 mb-2\" key={number} id={number} onClick={this.handleClick}>\n            {number}\n          </button>\n        );\n      }\n    });\n      \n    return (\n      < React.Fragment >\n        <IssueList currentIssues = {currentIssues} />\n        {renderPageNumbers}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <nav className=\"panel\">\n        <span>Open Github Issues</span>\n        <hr></hr>\n        {this.state.loading ?\n            this.renderLoading()\n            : this.renderIssues()}\n        </nav>\n      </div>);\n  }\n   \n}\n\nexport default Issues;  \n","import Issues from './components/Issues.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Issues  user=\"facebook\" repo=\"react\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}